buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url = "https://maven.pkg.github.com/gokoan/kuick" }
        gradlePluginPortal()
    }

    dependencies {
    }
}

plugins {
    id "org.jetbrains.kotlin.multiplatform" version "1.3.72" apply false
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url = "https://maven.pkg.github.com/gokoan/kuick" }
        gradlePluginPortal()
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    group = "com.gokoan"

    def isKuick = project.name.startsWith("kuick")
    def multiProject = true
    def includeJs = isKuick
    def mustPublish = !project.path.startsWith(":samples")
    println("--------------------------")
    println("project.name:  " + project.name)
    println("project.path:  " + project.path)
    println("isKuick:       " + isKuick)
    println("includeJs:     " + includeJs)
    println("mustPublish:   " + mustPublish)

    if (multiProject) {
        apply plugin: 'kotlin-multiplatform'

        kotlin {
            jvm {
                configure([compilations.main, compilations.test]) {
                    kotlinOptions {
                        jvmTarget = "1.8"
                        suppressWarnings = true
                        apiVersion = "1.3"
                        freeCompilerArgs = ["-Xallow-kotlin-package"]
                    }
                }
            }
            if (includeJs) {
                js {
                    browser { }
                    //nodejs { }
                    configure([compilations.main, compilations.test]) {
                        kotlinOptions {
                            target = "v5"
                            moduleKind = "umd"
                            sourceMap = true
                            freeCompilerArgs = ["-Xallow-kotlin-package"]
                        }
                    }
                }
            }

            configure([targets["metadata"]]) {
                configure([compilations.main]) {
                    kotlinOptions {
                        freeCompilerArgs = ["-Xallow-kotlin-package"]
                    }
                }
            }

            sourceSets {
                commonMain {
                    dependencies {
                        implementation kotlin('stdlib-common')
                    }
                }
                commonTest {
                    dependencies {
                        implementation kotlin('test-common')
                        implementation kotlin('test-annotations-common')
                    }
                }
                jvmMain {
                    dependencies {
                        implementation kotlin('stdlib-jdk8')
                    }
                }
                jvmTest {
                    dependencies {
                        implementation kotlin('test')
                        implementation kotlin('test-junit')
                    }
                }
                if (includeJs) {
                    jsMain {
                        dependencies {
                            implementation kotlin('stdlib-js')
                        }
                    }
                    jsTest {
                        dependencies {
                            implementation kotlin('test-js')
                        }
                    }
                }
            }
        }

        jvmTest {
            testLogging {
                exceptionFormat = 'full'
            }
        }

        dependencies {
            commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common"
            commonTestImplementation "org.jetbrains.kotlin:kotlin-test-common"

            if (includeJs) {
                jsMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-js"
                jsTestImplementation "org.jetbrains.kotlin:kotlin-test-js"
            }

            jvmMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            jvmMainImplementation "org.jetbrains.kotlin:kotlin-reflect"
            jvmTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"
            jvmTestImplementation "org.jetbrains.kotlin:kotlin-test"
            jvmTestImplementation "junit:junit:4.12"

            jvmTestImplementation "org.mockito:mockito-core:2.24.0"
            jvmTestImplementation "org.assertj:assertj-core:3.11.1"
            jvmTestImplementation "io.mockk:mockk:1.9"
        }

        //println(kotlin.targets.jvm.compilations.main.kotlinOptions.jvmTarget)
    } else {
        //println("Other project ${project.name}")

        apply plugin: 'kotlin'

        test {
            testLogging {
                exceptionFormat = 'full'
            }
        }
    }

    if (mustPublish) {
        def publishUser = System.getenv("GITHUB_ACTOR") //(rootProject.findProperty("BINTRAY_USER") ?: project.findProperty("bintrayUser") ?: System.getenv("BINTRAY_USER"))?.toString()
        def publishPassword = System.getenv("GITHUB_TOKEN") // (rootProject.findProperty("BINTRAY_KEY") ?: project.findProperty("bintrayApiKey") ?: System.getenv("BINTRAY_API_KEY"))?.toString()

        if (publishUser != null && publishPassword != null) {
            publishing {
                repositories {
                    maven {
                        credentials {
                            username = publishUser
                            password = publishPassword
                        }
                        url = uri("https://maven.pkg.github.com/gokoan/kuick")
                    }
                }
                publications {
                    maven(MavenPublication) {
                        groupId = project.group
                        artifactId = project.name
                        version = project.version

                        from multiProject ? components.kotlin : components.java

                        maven(MavenPublication) {
                            pom {
                                name = project.name
                                description = project.property("project.description")
                                url = project.property("project.scm.url")
                                licenses {
                                    license {
                                        name = project.property("project.license.name")
                                        url = project.property("project.license.url")
                                    }
                                }
                                scm {
                                    url = project.property("project.scm.url")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
